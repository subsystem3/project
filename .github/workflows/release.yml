name: Release

on:
  pull_request:
    branches: [main]
    types: [closed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: '0'

      - name: Install Git LFS
        run: sudo apt-get install git-lfs

      - name: Git LFS pull
        run: git lfs pull --include="stock/intro.mp4"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Generate PDFs
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            biber \
            texlive \
            texlive-latex-extra \
            texlive-fonts-extra \
            texlive-bibtex-extra \
            texlive-science

          for file in *.tex
          do
            dir=$(dirname "$file")
            base=$(basename "$file")
            base_no_ext="${base%.*}"
            pushd "$dir" > /dev/null
            rm -f "${base_no_ext}.pdf"
            pdflatex -interaction=nonstopmode "$base"
            biber "$base_no_ext"
            pdflatex -interaction=nonstopmode "$base"
            pdflatex -interaction=nonstopmode "$base"
            rm -f *.aux *.log *.out *.toc *.fdb_latexmk *.fls *.synctex.gz *.bbl *.run.xml
            popd > /dev/null
          done

      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: venv
          environment-file: environment.yml
          auto-activate-base: false

      - name: Generate Video
        id: generate-video
        run: |
          sudo apt-get update
          sudo apt-get -y install \
              bc \
              ffmpeg \
              libreoffice \
              poppler-utils

          python3 -m pip install --upgrade pip
          python3 -m pip install \
              google-cloud-texttospeech \
              gTTS  \
              moviepy \
              numpy \
              pdf2image  \
              Pillow==6.2.2 \
              python-pptx

          rm -f ${{ vars.PROJECT }}.mp4
          echo "${{ secrets.KEYFILE }}" | base64 --decode > keyfile.json
          python3 pptx2video.py ${{ vars.PROJECT }}.pptx --keyfile keyfile.json

          # GET TOTAL VIDEO DURATION
          total_seconds=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${{ vars.PROJECT }}.mp4)
          hours=$(bc <<< "${total_seconds}/3600")
          minutes=$(bc <<< "(${total_seconds}%3600)/60")
          seconds=$(printf "%.0f" $(bc <<< "${total_seconds}%60"))
          humanized_duration="${hours}h ${minutes}m ${seconds}s"
          echo "duration=$humanized_duration" >> "$GITHUB_OUTPUT"

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          PRERELEASE: true
          DEFAULT_BUMP: minor

      - name: Upload to Vimeo via Python API
        run: |
          python3 -m pip install --upgrade pip
          pip install PyVimeo
          python3 upload_video.py
        env:
          VIMEO_CLIENT_ID: ${{ secrets.VIMEO_CLIENT_ID }}
          VIMEO_CLIENT_SECRET: ${{ secrets.VIMEO_CLIENT_SECRET }}
          VIMEO_ACCESS_TOKEN: ${{ secrets.VIMEO_ACCESS_TOKEN }}
          VIMEO_VIDEO_ID: ${{ secrets.VIMEO_VIDEO_ID }}
          VIDEO_PATH: ${{ vars.PROJECT }}.mp4

      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            ${{ vars.PROPOSAL }}.pdf
            ${{ vars.REPORT }}.pdf
            ${{ vars.PROJECT }}.mp4
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          body: |
            DELIVERABLES:
              - [${{ vars.PROPOSAL }}.pdf](${{ vars.DOWNLOAD_URI }}/${{ steps.tag_version.outputs.new_tag }}/${{ vars.PROPOSAL }}.pdf)
              - [${{ vars.REPORT }}.pdf](${{ vars.DOWNLOAD_URI }}/${{ steps.tag_version.outputs.new_tag }}/${{ vars.REPORT }}.pdf)
              - [${{ vars.PROJECT }}.mp4](${{ vars.DOWNLOAD_URI }}/${{ steps.tag_version.outputs.new_tag }}/${{ vars.PROJECT }}.mp4)

            VIDEO DURATION: ${{ steps.generate-video.outputs.duration }}

            VIDEO LINK: <https://vimeo.com/${{ secrets.VIMEO_VIDEO_ID }}/2f1e66d926>

          draft: false
          prerelease: true
