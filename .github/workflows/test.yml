name: Test

on:
  push:
    branches: [dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Check out branch
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: '0'

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch

  build-pdfs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out dev branch
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: '0'

      - name: Change ownership of apt archives
        run: sudo chown -R $(whoami) /var/cache/apt/archives

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Generate PDFs
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            biber \
            texlive \
            texlive-latex-extra \
            texlive-fonts-extra \
            texlive-bibtex-extra \
            texlive-science

          for file in *.tex
          do
            dir=$(dirname "$file")
            base=$(basename "$file")
            base_no_ext="${base%.*}"
            pushd "$dir" > /dev/null
            rm -f "${base_no_ext}.pdf"
            pdflatex -interaction=nonstopmode "$base"
            biber "$base_no_ext"
            pdflatex -interaction=nonstopmode "$base"
            pdflatex -interaction=nonstopmode "$base"
            rm -f *.aux *.log *.out *.toc *.fdb_latexmk *.fls *.synctex.gz *.bbl *.run.xml
            popd > /dev/null
          done

  build-video:
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out dev branch
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: '0'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Change ownership of apt archives
        run: sudo chown -R $(whoami) /var/cache/apt/archives

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Generate Video
        id: generate-video
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -y install \
              ffmpeg \
              libreoffice \
              poppler-utils \
              bc

          python3 -m pip install --upgrade pip
          python3 -m pip install \
              gTTS  \
              moviepy \
              pdf2image  \
              python-pptx \
              google-cloud-texttospeech \
              numpy

          rm -f ${{ vars.PROJECT }}.mp4
          echo "${{ secrets.KEYFILE }}" | base64 --decode > keyfile.json
          python3 pptx2video.py ${{ vars.PROJECT }}.pptx --keyfile keyfile.json

          # GET TOTAL VIDEO DURATION
          total_seconds=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${{ vars.PROJECT }}.mp4)
          hours=$(bc <<< "${total_seconds}/3600")
          minutes=$(bc <<< "(${total_seconds}%3600)/60")
          seconds=$(printf "%.0f" $(bc <<< "${total_seconds}%60"))
          humanized_duration="${hours}h ${minutes}m ${seconds}s"
          echo "duration=$humanized_duration" >> "$GITHUB_OUTPUT"

      - name: Upload to Vimeo via Python API
        run: |
          python3 -m pip install --upgrade pip
          pip install PyVimeo
          python3 upload_video.py
        env:
          VIMEO_CLIENT_ID: ${{ secrets.VIMEO_CLIENT_ID }}
          VIMEO_CLIENT_SECRET: ${{ secrets.VIMEO_CLIENT_SECRET }}
          VIMEO_ACCESS_TOKEN: ${{ secrets.VIMEO_ACCESS_TOKEN }}
          VIMEO_VIDEO_ID: ${{ secrets.VIMEO_VIDEO_ID }}
          VIDEO_PATH: ${{ vars.PROJECT }}.mp4
