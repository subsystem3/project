name: Pull Request

on:
  pull_request:
    branches: [main, dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: read
  issues: write
  pull-requests: write

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Check out branch
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: '0'

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: minor

  build-pdfs:
    runs-on: ubuntu-latest
    container:
      image: texlive/texlive:latest
    steps:
      - name: Check out dev branch
        uses: actions/checkout@v3.5.3
        with:
          ref: dev
          fetch-depth: '0'

      - name: Generate PDFs
        shell: bash
        run: |
          # LOOK FOR .tex ONLY IN CURRENT WORKING DIRECTORY
          for file in *.tex
          do
            # CHANGE DIRECTORY DUE TO RELATIVE PATHS IN BUILDING
            dir=$(dirname "$file")
            base=$(basename "$file")
            base_no_ext="${base%.*}"
            pushd "$dir" > /dev/null

            # DELETE OLD PDF IF IT EXISTS
            rm -f "${base_no_ext}.pdf"

            # BUILD PDF
            pdflatex -interaction=nonstopmode "$base"

            # CLEAN
            rm -f *.aux *.log *.out *.toc *.fdb_latexmk *.fls *.synctex.gz *.bbl *.run.xml

            # RETURN TO ORIGINAL DIRECTORY
            popd > /dev/null
          done

      - name: Upload PDF Artifacts to workflow run
        uses: actions/upload-artifact@v3
        with:
          name: pdfs
          path: |
            ${{ vars.REPORT }}.pdf
            ${{ vars.PROPOSAL }}.pdf

  build-video:
    environment: pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Check out dev branch
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: '2'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Change ownership of apt archives
        run: sudo chown -R $(whoami) /var/cache/apt/archives

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Decode Google Application Credentials
        run: echo "${{ secrets.KEYFILE }}" | base64 --decode > keyfile.json

      - name: Generate Video
        id: generate-video
        shell: bash
        run: |
          # INSTALL DEPENDENCIES
          sudo apt-get update
          sudo apt-get -y install \
              ffmpeg \
              libreoffice \
              poppler-utils \
              bc

          python3 -m pip install --upgrade pip
          python3 -m pip install \
              gTTS  \
              moviepy \
              pdf2image  \
              python-pptx \
              google-cloud-texttospeech

          # REMOVE OLD VIDEO
          rm -f ${{ vars.PROJECT }}.mp4

          # GENERATE VIDEO WITH PROFESSIONAL VOICEOVER
          python3 pptx2video.py ${{ vars.PROJECT }}.pptx --keyfile keyfile.json

          # GET TOTAL VIDEO DURATION
          total_seconds=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${{ vars.PROJECT }}.mp4)
          hours=$(bc <<< "${total_seconds}/3600")
          minutes=$(bc <<< "(${total_seconds}%3600)/60")
          seconds=$(printf "%.0f" $(bc <<< "${total_seconds}%60"))
          humanized_duration="${hours}h ${minutes}m ${seconds}s"
          echo "duration=$humanized_duration" >> "$GITHUB_OUTPUT"

      - name: Upload to Vimeo via Python API
        run: |
          python3 -m pip install --upgrade pip
          pip install PyVimeo
          python3 upload_video.py
        env:
          VIMEO_CLIENT_ID: ${{ secrets.VIMEO_CLIENT_ID }}
          VIMEO_CLIENT_SECRET: ${{ secrets.VIMEO_CLIENT_SECRET }}
          VIMEO_ACCESS_TOKEN: ${{ secrets.VIMEO_ACCESS_TOKEN }}
          VIMEO_VIDEO_ID: ${{ secrets.VIMEO_VIDEO_ID }}
          VIDEO_PATH: ${{ vars.PROJECT }}.mp4

      - name: Upload Video Artifact
        uses: actions/upload-artifact@v3
        with:
          name: video
          path: ${{ vars.PROJECT }}.mp4

  comment-pr:
    needs: [build-pdfs, build-video, tag]
    environment: pull_request
    runs-on: ubuntu-latest
    steps:
    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          const issue_number = context.payload.pull_request.number;
          const artifact_url = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          const vimeo_url = `https://vimeo.com/${process.env.VIMEO_VIDEO_ID}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Workflow Artifacts (Video/PDFs)
            <${artifact_url}>

            Vimeo Link
            <https://vimeo.com/843997462/2f1e66d926>`

          });
